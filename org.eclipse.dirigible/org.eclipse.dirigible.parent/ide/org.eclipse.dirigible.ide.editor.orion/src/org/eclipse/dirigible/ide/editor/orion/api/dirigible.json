{
  "!name": "dirigible",
  "!define": {
    "$.getExecutionContext.!ret": {
      "put": "fn(key: ?, value: ?)",
      "get": "fn(key: ?)",
      "containsKey": "fn(key: ?) -> bool",
      "containsValue": "fn(value: ?) -> bool",
      "isEmpty": "fn() -> bool",
      "size": "fn() -> number",
      "keySet": "fn() -> $.getExecutionContext.!ret.keySet.!ret",
      "values": "fn() -> $.getExecutionContext.!ret.keySet.!ret",
      "clear": "fn()"
    },
    "$.getExecutionContext.!ret.keySet.!ret": {
      "add": "fn(value: ?)",
      "remove": "fn(value: ?)",
      "contains": "fn(value: ?) -> bool",
      "isEmpty": "fn() -> bool",
      "size": "fn() -> number",
      "keySet": "fn() -> !this",
      "values": "fn()",
      "clear": "fn()",
      "toArray": "fn()"
    },
    "$.getSystemOutput.!ret": {
      "println": "fn(input: ?)",
      "print": "fn(input: ?)",
      "flush": "fn()",
      "close": "fn()"
    },
    "$.getDatasource.!ret": {
      "getConnection": "fn() -> $.getDatasource.!ret.getConnection.!ret"
    },
    "$.getDatasource.!ret.getConnection.!ret": {
      "prepareStatement": "fn() -> $.getDatasource.!ret.getConnection.!ret.prepareStatement.!ret",
      "setAutoCommit": "fn(autoCommit: ?)",
      "commit": "fn()",
      "rollback": "fn()",
      "close": "fn()"
    },
    "$.getDatasource.!ret.getConnection.!ret.prepareStatement.!ret": {
      "executeQuery": "fn() -> $.getDatasource.!ret.getConnection.!ret.prepareStatement.!ret.executeQuery.!ret",
      "executeUpdate": "fn()",
      "execute": "fn()",
      "setString": "fn(index: ?, value: ?)",
      "setLong": "fn(index: ?, value: ?)",
      "setInt": "fn(index: ?, value: ?)",
      "setDouble": "fn(index: ?, value: ?)",
      "setFloat": "fn(index: ?, value: ?)",
      "setDate": "fn(index: ?, value: ?)",
      "setTime": "fn(index: ?, value: ?)",
      "setTimestamp": "fn(index: ?, value: ?)",
      "close": "fn()"
    },
    "$.getDatasource.!ret.getConnection.!ret.prepareStatement.!ret.executeQuery.!ret": {
      "next": "fn() -> bool",
      "execute": "fn()",
      "getString": "fn(index: ?) -> string",
      "getLong": "fn(index: ?) -> number",
      "getInt": "fn(index: ?) -> number",
      "getDouble": "fn(index: ?) -> number",
      "getFloat": "fn(index: ?) -> number",
      "getDate": "fn(index: ?) -> $.getDatabaseUtils.!ret.createDate.!ret",
      "getTime": "fn(index: ?) -> $.getDatabaseUtils.!ret.createDate.!ret",
      "getTimestamp": "fn(index: ?) -> $.getDatabaseUtils.!ret.createDate.!ret",
      "close": "fn()"
    },
    "$.getRequest.!ret": {
      "getCookies": "fn() -> [$.getRequest.!ret.getCookies.!ret.<i>]",
      "getHeader": "fn(name: ?) -> string",
      "getHeaders": "fn()",
      "getHeaderNames": "fn()",
      "getMethod": "fn() -> string",
      "getPathInfo": "fn() -> string",
      "getContextPath": "fn() -> string",
      "getQueryString": "fn() -> string",
      "isUserInRole": "fn(role: ?) -> bool",
      "getParameter": "fn(name: ?) -> string",
      "getParameterMap": "fn() -> $.getExecutionContext.!ret",
      "getParameterNames": "fn()",
      "getProtocol": "fn() -> string",
      "getScheme": "fn() -> string",
      "getServerName": "fn() -> string",
      "getServerPort": "fn() -> number"
    },
    "$.getRequest.!ret.getCookies.!ret": "[$.getRequest.!ret.getCookies.!ret.<i>]",
    "$.getRequest.!ret.getCookies.!ret.<i>": {
      "getName": "fn() -> string",
      "getPath": "fn() -> string",
      "getValue": "fn() -> string",
      "getVersion": "fn() -> number",
      "setName": "fn(name: ?)",
      "setPath": "fn(path: ?)",
      "setValue": "fn(value: ?)",
      "setVersion": "fn(index: ?)"
    },
    "$.getResponse.!ret": {
      "addCookie": "fn(cookie: ?)",
      "containsHeader": "fn(name: ?) -> bool",
      "sendError": "fn(code: ?, message: ?)",
      "sendRedirect": "fn(location: ?)",
      "setHeader": "fn(name: ?, value: ?)",
      "addHeader": "fn(name: ?, value: ?)",
      "setStatus": "fn(code: ?)",
      "getWriter": "fn() -> $.getResponse.!ret.getWriter.!ret",
      "getContentType": "fn() -> string",
      "getContentLength": "fn() -> string",
      "getCharacterEncoding": "fn() -> string",
      "setContentType": "fn(contentType: ?)",
      "setContentLength": "fn(length: ?)",
      "setCharacterEncoding": "fn(characterEncoding: ?)",
      "SC_CONTINUE": "number",
      "SC_SWITCHING_PROTOCOLS": "number",
      "SC_OK": "number",
      "SC_CREATED": "number",
      "SC_ACCEPTED": "number",
      "SC_NON_AUTHORITATIVE_INFORMATION": "number",
      "SC_NO_CONTENT": "number",
      "SC_RESET_CONTENT": "number",
      "SC_PARTIAL_CONTENT": "number",
      "SC_MULTIPLE_CHOICES": "number",
      "SC_MOVED_PERMANENTLY": "number",
      "SC_MOVED_TEMPORARILY": "number",
      "SC_FOUND": "number",
      "SC_SEE_OTHER": "number",
      "SC_NOT_MODIFIED": "number",
      "SC_USE_PROXY": "number",
      "SC_TEMPORARY_REDIRECT": "number",
      "SC_BAD_REQUEST": "number",
      "SC_UNAUTHORIZED": "number",
      "SC_PAYMENT_REQUIRED": "number",
      "SC_FORBIDDEN": "number",
      "SC_NOT_FOUND": "number",
      "SC_METHOD_NOT_ALLOWED": "number",
      "SC_NOT_ACCEPTABLE": "number",
      "SC_PROXY_AUTHENTICATION_REQUIRED": "number",
      "SC_REQUEST_TIMEOUT": "number",
      "SC_CONFLICT": "number",
      "SC_GONE": "number",
      "SC_LENGTH_REQUIRED": "number",
      "SC_PRECONDITION_FAILED": "number",
      "SC_REQUEST_ENTITY_TOO_LARGE": "number",
      "SC_REQUEST_URI_TOO_LONG": "number",
      "SC_UNSUPPORTED_MEDIA_TYPE": "number",
      "SC_REQUESTED_RANGE_NOT_SATISFIABLE": "number",
      "SC_EXPECTATION_FAILED": "number",
      "SC_INTERNAL_SERVER_ERROR": "number",
      "SC_NOT_IMPLEMENTED": "number",
      "SC_BAD_GATEWAY": "number",
      "SC_SERVICE_UNAVAILABLE": "number",
      "SC_GATEWAY_TIMEOUT": "number",
      "SC_HTTP_VERSION_NOT_SUPPORTED": "number"
    },
    "$.getResponse.!ret.getWriter.!ret": {
      "println": "fn(input: ?)",
      "print": "fn(input: ?)",
      "flush": "fn()",
      "close": "fn()"
    },
    "$.getSession.!ret": {
      "getAttribute": "fn(key: ?) -> string",
      "setAttribute": "fn(key: ?, value: ?)",
      "getAttributeNames": "fn()",
      "removeAttribute": "fn(key: ?)",
      "invalidate": "fn()"
    },
    "$.getInitialContext.!ret": {
      "bind": "fn(key: ?, value: ?)",
      "lookup": "fn(key: ?)",
      "rebind": "fn(key: ?, value: ?)",
      "unbind": "fn(key: ?)"
    },
    "$.getRepository.!ret": {
      "SEPARATOR": "string",
      "getRoot": "fn() -> $.getRepository.!ret.getRoot.!ret",
      "createCollection": "fn(path: ?) -> $.getRepository.!ret.getRoot.!ret",
      "getCollection": "fn(path: ?) -> $.getRepository.!ret.getRoot.!ret",
      "removeCollection": "fn(path: ?)",
      "hasCollection": "fn(path: ?) -> bool",
      "createResource": "fn(path: ?, content: ?, isBinary: ?, contentType: ?) -> $.getRepository.!ret.createResource.!ret",
      "getResource": "fn(path: ?) -> $.getRepository.!ret.createResource.!ret",
      "removeResource": "fn(path: ?)",
      "hasResource": "fn(path: ?) -> bool",
      "searchName": "fn(parameter: ?, caseInsensitive: ?) -> $.getExecutionContext.!ret.keySet.!ret",
      "searchPath": "fn(parameter: ?, caseInsensitive: ?) -> $.getExecutionContext.!ret.keySet.!ret",
      "searchText": "fn(parameter: ?, caseInsensitive: ?) -> $.getExecutionContext.!ret.keySet.!ret"
    },
    "$.getRepository.!ret.getRoot.!ret": {
      "getCollections": "fn() -> $.getExecutionContext.!ret.keySet.!ret",
      "getCollectionsNames": "fn() -> $.getExecutionContext.!ret.keySet.!ret",
      "createCollection": "fn(name: ?) -> $.getRepository.!ret.getRoot.!ret",
      "getCollection": "fn(name: ?) -> $.getRepository.!ret.getRoot.!ret",
      "removeCollection": "fn(collection: ?)",
      "getResources": "fn() -> $.getExecutionContext.!ret.keySet.!ret",
      "getResourcesNames": "fn() -> $.getExecutionContext.!ret.keySet.!ret",
      "getResource": "fn() -> $.getRepository.!ret.createResource.!ret",
      "removeResource": "fn(name: ?)",
      "getChildren": "fn()",
      "createResource": "fn(name: ?, content: ?, isBinary: ?, contentType: ?) -> $.getRepository.!ret.createResource.!ret",
      "getName": "fn() -> string",
      "getPath": "fn() -> string",
      "getParent": "fn() -> $.getRepository.!ret.getRoot.!ret",
      "create": "fn()",
      "delete": "fn()",
      "renameTo": "fn(name: ?)",
      "exists": "fn() -> bool",
      "isEmpty": "fn() -> bool"
    },
    "$.getRepository.!ret.createResource.!ret": {
      "getContent": "fn() -> [?]",
      "setContent": "fn(content: ?, isBinary: ?, contentType: ?)",
      "isBinary": "fn() -> bool",
      "getContentType": "fn() -> string",
      "getName": "fn() -> string",
      "getPath": "fn() -> string",
      "getParent": "fn() -> $.getRepository.!ret.getRoot.!ret",
      "create": "fn()",
      "delete": "fn()",
      "renameTo": "fn(name: ?)",
      "exists": "fn() -> bool",
      "isEmpty": "fn() -> bool"
    },
    "$.getRepository.!ret.createResource.!ret.getContent.!ret": "[?]",
    "$.getBinaryStorage.!ret": {
      "exists": "fn() -> bool",
      "clear": "fn()",
      "delete": "fn(path: ?)",
      "put": "fn(path: ?, data: ?, contentType: ?)",
      "get": "fn(path: ?) -> [?]"
    },
    "$.getBinaryStorage.!ret.get.!ret": "[?]",
    "$.getMailService.!ret": {
      "sendMail": "fn(from: ?, to: ?, subject: ?, content: ?)"
    },
    "$.getExtensionService.!ret": {
      "getExtensions": "fn(extensionPoint: ?) -> [string]",
      "getExtension": "fn(extension: ?, extensionPoint: ?) -> $.getExtensionService.!ret.getExtension.!ret",
      "getExtensionPoint": "fn(extensionPoint: ?) -> $.getExtensionService.!ret.getExtensionPoint.!ret",
      "getExtensionPoints": "fn() -> [string]",
      "createExtension": "fn(extension: ?, extensionPoint: ?, description: ?)",
      "updateExtension": "fn(extension: ?, extensionPoint: ?, description: ?)",
      "createExtensionPoint": "fn(extensionPoint: ?, description: ?)",
      "updateExtensionPoint": "fn(extensionPoint: ?, description: ?)",
      "removeExtension": "fn(extension: ?, extensionPoint: ?)",
      "removeExtensionPoint": "fn(extensionPoint: ?)"
    },
    "$.getExtensionService.!ret.getExtensions.!ret": "[string]",
    "$.getExtensionService.!ret.getExtension.!ret": {
      "getLocation": "fn() -> string",
      "getExtensionPoint": "fn() -> string",
      "getDescription": "fn() -> string",
      "getCreatedBy": "fn() -> string",
      "getCreatedAt": "fn() -> $.getDatabaseUtils.!ret.createDate.!ret"
    },
    "$.getExtensionService.!ret.getExtensionPoint.!ret": {
      "getLocation": "fn() -> string",
      "getDescription": "fn() -> string",
      "getCreatedBy": "fn() -> string",
      "getCreatedAt": "fn() -> $.getDatabaseUtils.!ret.createDate.!ret"
    },
    "$.getExtensionService.!ret.getExtensionPoints.!ret": "[string]",
    "$.getIndexingService.!ret": {
      "getIndex": "fn(indexName: ?) -> $.getIndexingService.!ret.getIndex.!ret"
    },
    "$.getIndexingService.!ret.getIndex.!ret": {
      "clearIndex": "fn()",
      "search": "fn(term: ?) -> $.getExecutionContext.!ret.keySet.!ret",
      "createDocument": "fn(id: ?, content: ?) -> ?",
      "indexDocument": "fn(document: ?)",
      "deleteDocument": "fn(document: ?)",
      "updateDocument": "fn(document: ?)",
      "getLastIndexed": "fn() -> $.getDatabaseUtils.!ret.createDate.!ret"
    },
    "$.getConnectivityService.!ret": {
      "getConnectivityConfiguration": "fn()"
    },
    "$.getMessagingService.!ret": {
      "registerClient": {
        "!type": "fn(clientName: ?)",
        "!doc": "Registers a Client by Name or does nothing if such a Client exists"
      },
      "unregisterClient": {
        "!type": "fn(clientName: ?)",
        "!doc": "Unregisters a Client by Name"
      },
      "isClientExists": {
        "!type": "fn(clientName: ?) -> bool",
        "!doc": "Checks the existence of a Client by Name"
      },
      "registerTopic": {
        "!type": "fn(topicName: ?)",
        "!doc": "Registers a Topic by Name or does nothing if such a Topic exists"
      },
      "unregisterTopic": {
        "!type": "fn(topicName: ?)",
        "!doc": "Unregisters a CTopiclient by Name"
      },
      "isTopicExists": {
        "!type": "fn(topicName: ?) -> bool",
        "!doc": "Checks the existence of a Topic by Name"
      },
      "subscribe": {
        "!type": "fn(client: ?, topic: ?)",
        "!doc": "Subscribes a given Client for a given Topic,\nso that this Client will get the new messages\nfrom this Topic after the Routing Process"
      },
      "unsubscribe": {
        "!type": "fn(client: ?, topic: ?)",
        "!doc": "Un-subscribes a given Client from a given Topic"
      },
      "isSubscriptionExists": {
        "!type": "fn(subscriber: ?, topic: ?) -> bool",
        "!doc": "Checks whether subscription of a given Client to a given Topic exists"
      },
      "send": {
        "!type": "fn(sender: ?, topic: ?, subject: ?, body: ?)",
        "!doc": "Sends a message to the hub"
      },
      "sendMessage": {
        "!type": "fn(messageDefinition: ?)",
        "!doc": "Sends a message to the hub"
      },
      "receive": {
        "!type": "fn(receiver: ?) -> $.getExecutionContext.!ret.keySet.!ret",
        "!doc": "Get all the new messages for this Client for all the Topics"
      },
      "receiveByTopic": {
        "!type": "fn(receiver: ?, topic: ?) -> $.getExecutionContext.!ret.keySet.!ret",
        "!doc": "Get all the new messages for this Client for a given Topic"
      },
      "route": {
        "!type": "fn()",
        "!doc": "Triggers the Routing Process.\nTakes new Incoming messages and creates\nOutgoing links for all subscribed Clients,\nso that they can retrieve them by calling receive() method"
      },
      "cleanup": {
        "!type": "fn()",
        "!doc": "Removes older messages"
      }
    },
    "$.getIOUtils.!ret": {
      "toString": "fn(inputStream: ?) -> string"
    },
    "$.getHttpUtils.!ret": {
      "createGet": "fn(url: ?)",
      "createPost": "fn(url: ?)",
      "createPut": "fn(url: ?)",
      "createDelete": "fn(url: ?)",
      "createHttpClient": "fn(trustAll: ?)",
      "consume": "fn(entity: ?)",
      "createBasicScheme": "fn()",
      "createDigestScheme": "fn()",
      "createBasicHeader": "fn(name: ?, value: ?)"
    },
    "$.getBase64Utils.!ret": {
      "encodeBase64": "fn(input: ?) -> [?]",
      "decodeBase64": "fn(input: ?) -> [?]"
    },
    "$.getBase64Utils.!ret.encodeBase64.!ret": "[?]",
    "$.getBase64Utils.!ret.decodeBase64.!ret": "[?]",
    "$.getHexUtils.!ret": {
      "encodeHex": "fn(input: ?) -> [?]",
      "decodeHex": "fn(input: ?) -> [?]"
    },
    "$.getHexUtils.!ret.encodeHex.!ret": "[?]",
    "$.getHexUtils.!ret.decodeHex.!ret": "[?]",
    "$.getDigestUtils.!ret": {
      "md5": "fn(input: ?) -> [?]",
      "md5Hex": "fn(input: ?) -> [?]",
      "sha": "fn(input: ?) -> [?]",
      "sha256": "fn(input: ?) -> [?]",
      "sha384": "fn(input: ?) -> [?]",
      "sha512": "fn(input: ?) -> [?]",
      "shaHex": "fn(input: ?) -> [?]"
    },
    "$.getDigestUtils.!ret.md5.!ret": "[?]",
    "$.getDigestUtils.!ret.md5Hex.!ret": "[?]",
    "$.getDigestUtils.!ret.sha.!ret": "[?]",
    "$.getDigestUtils.!ret.sha256.!ret": "[?]",
    "$.getDigestUtils.!ret.sha384.!ret": "[?]",
    "$.getDigestUtils.!ret.sha512.!ret": "[?]",
    "$.getDigestUtils.!ret.shaHex.!ret": "[?]",
    "$.getUrlUtils.!ret": {
      "encode": "fn(url: ?, enc: ?) -> [?]",
      "decode": "fn(url: ?, enc: ?) -> [?]"
    },
    "$.getUrlUtils.!ret.encode.!ret": "[?]",
    "$.getUrlUtils.!ret.decode.!ret": "[?]",
    "$.getUuidUtils.!ret": {
      "randomUUID": "fn() -> $.getUuidUtils.!ret.randomUUID.!ret",
      "fromString": "fn(uuid: ?) -> $.getUuidUtils.!ret.randomUUID.!ret"
    },
    "$.getUuidUtils.!ret.randomUUID.!ret": {
      "toString": "fn() -> string"
    },
    "$.getDatabaseUtils.!ret": {
      "getNext": "fn(sequenceName: ?) -> number",
      "createSequence": "fn(sequenceName: ?, start: ?) -> number",
      "dropSequence": "fn(sequenceName: ?) -> number",
      "existSequence": "fn(sequenceName: ?) -> bool",
      "createLimitAndOffset": "fn(limit: ?, offset: ?) -> string",
      "createTopAndStart": "fn(limit: ?, offset: ?) -> string",
      "createDate": "fn(milliseconds: ?) -> $.getDatabaseUtils.!ret.createDate.!ret",
      "createTime": "fn(milliseconds: ?) -> $.getDatabaseUtils.!ret.createDate.!ret",
      "createTimestamp": "fn(milliseconds: ?) -> $.getDatabaseUtils.!ret.createDate.!ret"
    },
    "$.getDatabaseUtils.!ret.createDate.!ret": {
      "toString": "fn()",
      "getTime": "getTime"
    },
    "$.getXssUtils.!ret": {
      "escapeCsv": "fn(input: ?) -> string",
      "escapeHtml": "fn(input: ?) -> string",
      "escapeJava": "fn(input: ?) -> string",
      "escapeJavaScript": "fn(input: ?) -> string",
      "escapeSql": "fn(input: ?) -> string",
      "escapeXml": "fn(input: ?) -> string",
      "unescapeCsv": "fn(input: ?) -> string",
      "unescapeHtml": "fn(input: ?) -> string",
      "unescapeJava": "fn(input: ?) -> string",
      "unescapeJavaScript": "fn(input: ?) -> string",
      "unescapeSql": "fn(input: ?) -> string",
      "unescapeXml": "fn(input: ?) -> string"
    },
    "$.getXmlUtils.!ret": {
      "fromJson": "fn(json: ?) -> string",
      "toJson": "fn(xml: ?) -> string"
    },
    "$.getDatasource.!ret.getConnection.!ret.prepareStatement.!ret.executeQuery.!ret.getDate.!ret": {
      "getTime": "getTime",
      "toString": "$.getDatabaseUtils.!ret.createDate.!ret.toString"
    },
    "$.getRepository.!ret.getRoot.!ret.getResource.!ret": {
      "getContent": "$.getRepository.!ret.createResource.!ret.getContent",
      "setContent": "$.getRepository.!ret.createResource.!ret.setContent",
      "isBinary": "$.getRepository.!ret.createResource.!ret.isBinary",
      "getContentType": "$.getRepository.!ret.createResource.!ret.getContentType",
      "getName": "$.getRepository.!ret.createResource.!ret.getName",
      "getPath": "$.getRepository.!ret.createResource.!ret.getPath",
      "getParent": "$.getRepository.!ret.createResource.!ret.getParent",
      "create": "$.getRepository.!ret.createResource.!ret.create",
      "delete": "$.getRepository.!ret.createResource.!ret.delete",
      "renameTo": "$.getRepository.!ret.createResource.!ret.renameTo",
      "exists": "$.getRepository.!ret.createResource.!ret.exists",
      "isEmpty": "$.getRepository.!ret.createResource.!ret.isEmpty"
    },
    "$.getExtensionService.!ret.getExtension.!ret.getCreatedAt.!ret": {
      "getTime": "getTime",
      "toString": "$.getDatabaseUtils.!ret.createDate.!ret.toString"
    }
  },
  "getTime": "fn() -> number",
  "$": {
    "getExecutionContext": {
      "!type": "fn() -> $.getExecutionContext.!ret",
      "!doc": "Execution context holds the stack parameters during the call"
    },
    "getSystemOutput": {
      "!type": "fn() -> $.getSystemOutput.!ret",
      "!doc": "Standard system out"
    },
    "getDatasource": {
      "!type": "fn() -> $.getDatasource.!ret",
      "!doc": "Default DataSource assigned to this instance"
    },
    "getRequest": {
      "!type": "fn() -> $.getRequest.!ret",
      "!doc": "Standard Request object"
    },
    "getResponse": {
      "!type": "fn() -> $.getResponse.!ret",
      "!doc": "Standard Response object"
    },
    "getSession": {
      "!type": "fn() -> $.getSession.!ret",
      "!doc": "Standard Session object"
    },
    "getUserName": {
      "!type": "fn() -> string",
      "!doc": "Current logged-in user, if any"
    },
    "getInitialContext": {
      "!type": "fn() -> $.getInitialContext.!ret",
      "!doc": "Standard Initial Context of this instance"
    },
    "getRepository": {
      "!type": "fn() -> $.getRepository.!ret",
      "!doc": "Content Repository holding the executable artifacts"
    },
    "getBinaryStorage": {
      "!type": "fn() -> $.getBinaryStorage.!ret",
      "!doc": "Default Binary Storage"
    },
    "getFileStorage": {
      "!type": "fn() -> $.getBinaryStorage.!ret",
      "!doc": "Default File Storage"
    },
    "getConfigurationStorage": {
      "!type": "fn() -> $.getBinaryStorage.!ret",
      "!doc": "Default Configuration Storage"
    },
    "getMailService": {
      "!type": "fn() -> $.getMailService.!ret",
      "!doc": "Default Mail Service assigned to this instance, if any"
    },
    "getExtensionService": {
      "!type": "fn() -> $.getExtensionService.!ret",
      "!doc": "Extension Service holding the registered extensions and extension-points"
    },
    "getIndexingService": {
      "!type": "fn() -> $.getIndexingService.!ret",
      "!doc": "Default Indexing Service for creating text based indexes"
    },
    "getConnectivityService": {
      "!type": "fn() -> $.getConnectivityService.!ret",
      "!doc": "Default Connectivity Service assigned to this instance, if any"
    },
    "getMessagingService": {
      "!type": "fn() -> $.getMessagingService.!ret",
      "!doc": "Passive Messaging Service enabling asynchronous execution, if required"
    },
    "getIOUtils": {
      "!type": "fn() -> $.getIOUtils.!ret",
      "!doc": "IO utility operations"
    },
    "getHttpUtils": {
      "!type": "fn() -> $.getHttpUtils.!ret",
      "!doc": "HTTP utility operations"
    },
    "getBase64Utils": {
      "!type": "fn() -> $.getBase64Utils.!ret",
      "!doc": "Base64 utility operations"
    },
    "getHexUtils": {
      "!type": "fn() -> $.getHexUtils.!ret",
      "!doc": "HEX utility operations"
    },
    "getDigestUtils": {
      "!type": "fn() -> $.getDigestUtils.!ret",
      "!doc": "Digest utility operations"
    },
    "getUrlUtils": {
      "!type": "fn() -> $.getUrlUtils.!ret",
      "!doc": "URL utility operations"
    },
    "getUploadUtils": {
      "!type": "fn() -> ?",
      "!doc": "Upload utility operations"
    },
    "getUuidUtils": {
      "!type": "fn() -> $.getUuidUtils.!ret",
      "!doc": "UUID utility operations"
    },
    "getDatabaseUtils": {
      "!type": "fn() -> $.getDatabaseUtils.!ret",
      "!doc": "Database utility operations"
    },
    "getXssUtils": {
      "!type": "fn() -> $.getXssUtils.!ret",
      "!doc": "XSS utility operations"
    },
    "getXmlUtils": {
      "!type": "fn() -> $.getXmlUtils.!ret",
      "!doc": "XML utility operations"
    },
    "get": {
      "!type": "fn(key: ?) -> string",
      "!doc": "Getter for the instance parameters"
    },
    "set": {
      "!type": "fn(key: ?, value: ?)",
      "!doc": "Setter for the instance parameters"
    }
  }
}
